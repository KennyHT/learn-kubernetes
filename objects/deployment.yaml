apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  labels:
    app: api
spec:
  replicas: 10
  selector:
    matchLabels:
      app: api
  minReadySeconds: 30
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 2
  strategy:
    rollingUpdate:
      maxUnavailable: 20%
      maxSurge: 0%
  template:
    metadata:
      name: api
      labels:
        app: api
      annotations:
        kubernetes.io/change-cause: 'Data changed in API, updating to 2.0'
    spec:
      containers:
      - name: simple-server
        imagePullPolicy: IfNotPresent
        image: rabbitbird/simple-server:2.0
        ports:
          - name: app
            containerPort: 8080
        resources:
          requests:
            memory: "200Mi"
            cpu: "250m"
          limits:
            memory: "400Mi"
            cpu: "500m"
        #
        # Liveness Check: Is your application alive?
        #
        livenessProbe:
          httpGet:
            path: /health-check
            port: app
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
          failureThreshold: 3
        #
        # Readiness Check: Is your app ready to serve traffic
        #
        # Use this if there is something your container needs to do on
        # startup (e.g. compute and load large data-set into memory)
        # before it can be considered ready to receive traffic.
        #
        readinessProbe:
          httpGet:
            path: /health-check
            port: app
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5

# ToDO: Research how Kubernetes ensures that any previous connections are finished before killing the Pod.
# TODo: Add instructions to lab for creating different version of
